name: Validate PR

on:
  push:
    branches: [master]
  pull_request:
    branches: [master]

jobs:
  validate:
    name: validate
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: Use Node.js 16.x
        uses: actions/setup-node@v2
        with:
          node-version: 16.x

      - name: Get yarn cache directory path
        id: yarn-cache-dir-path
        run: echo "::set-output name=dir::$(yarn cache dir)"

      - uses: actions/cache@v2
        id: yarn-cache
        with:
          path: ${{ steps.yarn-cache-dir-path.outputs.dir }}
          key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-yarn-

      - name: Install dependencies
        run: yarn --frozen-lockfile

      - name: Save PR number
        run: echo ${{ github.event.number }} > pr.txt

      - name: Get changed files
        id: changed-files
        uses: tj-actions/changed-files@v35
        with:
          dir_names: true
          files: |
            data/**

      - name: List all changed tokens
        id: changed_tokens
        run: |
          tokens=""
          for file in ${{ steps.changed-files.outputs.all_changed_files }}; do
            token=$(echo -e "$file" | sed -nr "s|^data/([^/]*/?).*|\1|p")
            tokens+="${token},"
          done
          echo "result=${tokens%,*}" >> $GITHUB_OUTPUT

      - name: Validate token list
        run: |
          yarn validate --datadir ./data --tokens "${{ steps.changed_tokens.outputs.result }}" 2> err.txt 1> std.txt

      - name: Print output
        if: ${{ always() }}
        run: |
          cat std.txt; cat err.txt

      - name: Upload artifacts
        if: ${{ always() }}
        uses: actions/upload-artifact@v3
        with:
          name: logs-artifact
          path: |
            pr.txt
            err.txt
            std.txt

      - name: Check existence of validation errors
        if: ${{ always() }}
        id: check_for_validation_errors
        run: |
          result='false'
          if [ -f validation_result_errors.txt ]; then
            result='true'
          fi
          echo "result=$result" >> $GITHUB_OUTPUT

      - name: Check existence of validation warnings
        if: ${{ always() }}
        id: check_for_validation_warnings
        run: |
          result='false'
          if [ -f validation_result_warnings.txt ]; then
            result='true'
          fi
          echo "result=$result" >> $GITHUB_OUTPUT

      - name: Upload validation errors
        if: ${{ always() }}
        uses: actions/upload-artifact@v3
        with:
          name: validation-artifacts
          path: validation_result_errors.txt

      - name: Upload validation warnings
        if: ${{ always() }}
        uses: actions/upload-artifact@v3
        with:
          name: validation-artifacts
          path: validation_result_warnings.txt

      - name: get validation errors
        id: validation_errors
        if: ${{ always() }}
        run: |
          if ${{ steps.check_for_validation_errors.outputs.result == 'true' }}; then
            message="$(cat validation_result_errors.txt)"
            EOF=$(dd if=/dev/urandom bs=15 count=1 status=none | base64)
            echo "text<<$EOF" >> $GITHUB_OUTPUT
            echo "$message" >> $GITHUB_OUTPUT
            echo "$EOF" >> $GITHUB_OUTPUT
          fi

      - name: get validation warnings
        id: validation_warnings
        if: ${{ always() }}
        run: |
          if ${{ steps.check_for_validation_warnings.outputs.result == 'true' }}; then
            message="$(cat validation_result_warnings.txt)"
            EOF=$(dd if=/dev/urandom bs=15 count=1 status=none | base64)
            echo "text<<$EOF" >> $GITHUB_OUTPUT
            echo "$message" >> $GITHUB_OUTPUT
            echo "$EOF" >> $GITHUB_OUTPUT
          fi

      - name: comment validation errors
        if: ${{ always() }}
        uses: actions/github-script@v6
        with:
          script: |
            if (${{ steps.check_for_validation_errors.outputs.result }}) {
              github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `üõë These errors were encountered during validation and should be fixed before merging:
              \`\`\`bash
              ${{ steps.validation_errors.outputs.text }}
              \`\`\`
              `
              })
            }

      - name: comment validation warnings
        if: ${{ always() }}
        uses: actions/github-script@v6
        with:
          script: |
            if (${{ steps.check_for_validation_warnings.outputs.result }}) {
              github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `‚ö†Ô∏è These warnings were encountered during validation:
              \`\`\`bash
              ${{ steps.validation_warnings.outputs.text }}
              \`\`\`
              `
              })
            }

