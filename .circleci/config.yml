version: 2.1

orbs:
  utils: ethereum-optimism/circleci-utils@1.0.18
  node: circleci/node@5.1.0

parameters:
  run_job:
    type: enum
    default: "select_job"
    enum:
      [
        "select_job",
        "generate-token-list"
      ]

commands:
  setup:
    description: "Setup Node.js environment with pnpm and nx"
    steps:
      - utils/checkout-with-mise      # Install dependencies
      - run:
          name: Install dependencies
          environment:
            NPM_TOKEN: nada
          command: |
            pnpm i --frozen-lockfile
  continue-if-not-bot:
    description: "Continue if the push to branch run by a non github user"
    steps:
      - run:
          name: Check if push to branch run by a non github user
          command: |
            if [ -z "$CIRCLE_USERNAME" ]; then
              echo "CIRCLE_USERNAME is not set"
              circleci-agent step halt
            fi



jobs:
  generate-token-list-and-publish:
    machine:
      image: ubuntu-2204:2024.08.1
    steps:
      - setup
      - run:
          name: Continue if last commit was made by the bot
          command: |
            LAST_COMMIT_EMAIL=$(git log -1 --pretty=format:%ae)
            if [ "$LAST_COMMIT_EMAIL" = "bot@users.noreply.github.com" ]; then
              echo "Last commit was already made by the bot ($LAST_COMMIT_EMAIL). Halting job."
              circleci-agent step halt
            else
              echo "Last commit author ($LAST_COMMIT_EMAIL) is not the bot. Proceeding."
            fi
      - run:
          name: Prepare git
          command: |
            # stash all changes
            git stash push -u

            git fetch origin
            git checkout $CIRCLE_BRANCH

            # config git
            git config --global user.email "bot@users.noreply.github.com"
            git config --global user.name "bot"
      - run:
          name: Generate token list
          command: |
            # generate the token list
            pnpm generate:ci

            # add the token list to the commit
            git add optimism.tokenlist.json
            # Create commit if there are changes
            if git diff --staged --quiet; then
              echo "No changes to commit"
              circleci-agent step halt
            fi

            echo "Committing changes=bot(ci): generate token list"
            git commit -m "bot(ci): generate token list"
          environment: # this is needed to avoid misuse of the github token and to avoid leaking secrets by mistake with custom commands
            NPM_TOKEN: nada
            GITHUB_TOKEN_GOVERNANCE: nada
      - run:
          name: Add version
          command: |
            # this command will add a new version to package.json and commit the change
            npm version patch
      - run:
          name: Push changes
          command: |
            echo "Pushing changes"
            git push "https://x-access-token:${GITHUB_TOKEN_GOVERNANCE}@github.com/${CIRCLE_PROJECT_USERNAME}/${CIRCLE_PROJECT_REPONAME}.git" $CIRCLE_BRANCH
      - run:
          name: Verify NPM Token
          command: npm whoami
      - run:
          name: Publish package
          command: pnpm publish

  stale:
      machine:
        image: ubuntu-2204:2024.08.1
      steps:
        - utils/github-stale:
            stale-issue-message: 'This issue has been automatically marked as stale and will be closed in 114 days if no updates'
            stale-pr-message: 'This pr has been automatically marked as stale and will be closed in 37 days if no updates'
            close-issue-message: 'This issue was closed as stale.  Please reopen if this is a mistake'
            close-pr-message: 'This PR was closed as stale.  Please reopen if this is a mistake'
            days-before-issue-stale: 100
            days-before-pr-stale: 30
            days-before-issue-close: 114
            days-before-pr-close: 37

  test:
    docker:
      - image: cimg/node:16.20
    steps:
      - setup
      - run:
          name: Run Tests
          command: |
            pnpm test

  validate:
    docker:
      - image: cimg/node:16.20
    steps:
      - setup
      - run:
          name: Save PR number
          command: |
            if [ -n "$CIRCLE_PULL_REQUEST" ]; then
              PR_NUMBER=$(echo $CIRCLE_PULL_REQUEST | rev | cut -d'/' -f1 | rev)
              echo $PR_NUMBER > pr.txt
            fi
      - run:
          name: Get changed files and extract tokens
          command: |
            git fetch origin master
            CHANGED_FILES=$(git diff --name-only origin/master...HEAD -- data/)
            tokens=""
            for file in $CHANGED_FILES; do
              token=$(echo -e "$file" | sed -nr "s|^data/([^/]*/?).*|\1|p")
              if [ ! -z "$token" ]; then
                tokens+="${token},"
              fi
            done
            if [ ! -z "$tokens" ]; then
              tokens=${tokens%,}
              echo "export CHANGED_TOKENS=$tokens" >> $BASH_ENV
            fi

      - run:
          name: Validate tokens
          command: |
            if [ ! -z "$CHANGED_TOKENS" ]; then
              pnpm validate --datadir ./data --tokens "$CHANGED_TOKENS" 2> err.txt 1> std.txt
            fi
          when: always
      - run:
          name: Print output
          command: |
            if [ ! -z "$CHANGED_TOKENS" ]; then
              cat std.txt
              cat err.txt
            fi
          when: always
      - store_artifacts:
          path: pr.txt
          destination: pr.txt
      - store_artifacts:
          path: err.txt
          destination: err.txt
      - store_artifacts:
          path: std.txt
          destination: std.txt
      - store_artifacts:
          path: validation_results.txt
          destination: validation_results.txt


workflows:
  generate-token-list-workflow:
    when:
      or:
        - equal: [<< pipeline.parameters.run_job >>, "generate-token-list"]
        - and:
            - equal: [<< pipeline.git.branch >>, "master"]
            - equal: [<< pipeline.trigger_source >>, "webhook"]
    jobs:
      - validate:
          filters:
            branches:
              only: master
      - test:
          filters:
            branches:
              only: master
      - generate-token-list-and-publish:
          context: circleci-repo-ethereum-optimism.github.io
          filters:
            branches:
              only: master
          requires:
            - validate
            - test


  stale-workflow:
    when:
      equal: [<< pipeline.schedule.name >>, "run_daily"]
    jobs:
      - stale:
          context: circleci-repo-ethereum-optimism.github.io

  test-workflow:
    jobs:
      - test:
          filters:
            branches:
              ignore: master # ignore master branch as it is already validated in generate-token-list-workflow

  validate-workflow:
    jobs:
      - validate:
          filters:
            branches:
              ignore: master
